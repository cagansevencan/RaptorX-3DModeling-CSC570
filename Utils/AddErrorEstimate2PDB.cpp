#include <string>
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <cmath>
#include <map>
#include <algorithm>
using namespace std;




//------------ example of B-factor column --------------//
/*
REMARK   COMBINED MODEL GENERATED BY ROSETTA
EXPDTA    THEORETICAL MODEL, MODELLER 9v8 2018/04/21 08:56:30
REMARK   6 MODELLER OBJECTIVE FUNCTION:      1426.3124
REMARK   6 MODELLER BEST TEMPLATE % SEQ ID: 100.000
SEQRES   1    525  ASN SER THR LEU PHE SER GLN VAL GLU ASN HIS SER VAL
SEQRES   2    525  HIS SER ASN PHE SER GLU LYS ASN ALA GLN LEU LEU ALA
SEQRES   3    525  PHE GLU ASN ASP ASP CYS HIS LEU PRO LEU ALA MET ILE
SEQRES   4    525  PHE THR LEU ALA LEU ALA TYR GLY ALA VAL ILE ILE LEU
......
ATOM      1  N   ASN     1     -18.120  -9.095  33.892  1.00 21.30           N
ATOM      2  CA  ASN     1     -19.528  -9.112  33.432  1.00 21.30           C
ATOM      3  CB  ASN     1     -19.584  -9.244  31.902  1.00 21.30           C
ATOM      4  CG  ASN     1     -19.089  -7.939  31.301  1.00 21.30           C
ATOM      5  OD1 ASN     1     -19.567  -6.861  31.651  1.00 21.30           O
ATOM      6  ND2 ASN     1     -18.096  -8.037  30.378  1.00 21.30           N
ATOM      7  C   ASN     1     -20.248 -10.276  34.036  1.00 21.30           C
ATOM      8  O   ASN     1     -21.320 -10.660  33.573  1.00 21.30           O
ATOM      9  N   SER     2     -19.678 -10.856  35.114  1.00 21.58           N
ATOM     10  CA  SER     2     -20.257 -12.008  35.743  1.00 21.58           C

====================================================
The 10-th column is the B-factor value.
====================================================
*/


//--------- load a file containing assessment --------//
//-> example
/*
1.28
5.12
17.84
5.14
...
*/

int Load_Assess_File(string &in, vector <double> &out)
{
	ifstream fin;
	string buf;
	//read
	fin.open(in.c_str(), ios::in);
	if(fin.fail()!=0)
	{
		fprintf(stderr,"infile %s not found!!\n",in.c_str());
		exit(-1);
	}
	//proc
	out.clear();
	int count=0;
	for(;;)
	{
		if(!getline(fin,buf,'\n'))break;
		istringstream www(buf);
		double value;
		www>>value;
		if(value<0 || value>100)
		{
			fprintf(stderr,"WARNING: value %lf should be within 0 to 100 \n",value);
			//mod value
			if(value<0)value=0.00;
			if(value>100)value=99.99;
		}
		out.push_back(value);
		count++;
	}
	//return
	return count;
}

//--------- read PDB CA only ------------//
int Read_PDB_CA_Only(string &pdbfile,
		map<string, int > &ws_mapping)
{
	ifstream fin;
	string buf,temp;
	//read
	fin.open(pdbfile.c_str(), ios::in);
	if(fin.fail()!=0)
	{
		fprintf(stderr,"pdbfile %s not found!!\n",pdbfile.c_str());
		exit(-1);
	}
	//proc
	ws_mapping.clear();
	map<string, int >::iterator iter;
	int len;
	int count=0;
	int cur=0;
	for(;;)
	{
		if(!getline(fin,buf,'\n'))break;
		len=(int)buf.length();
		if(len<3)continue;
		//check TER
		temp=buf.substr(0,3);
		if(temp=="TER"||temp=="END")break;
		//check ATOM
		if(len<4)continue;
		temp=buf.substr(0,4);
		if(temp!="ATOM" && temp!="HETA")continue;
		//check CA
		temp=buf.substr(13,2);
		if(temp=="CA")count++;
		//do mapping
		//residue number
		temp=buf.substr(22,4);
		iter = ws_mapping.find(temp);
		if(iter == ws_mapping.end())
		{
			cur++;
			ws_mapping.insert(map < string, int >::value_type(temp, cur));
		}
	}
	//final check
	if(cur!=count)
	{
		fprintf(stderr,"CA number %d not equal to residue number %d \n",cur,count);
		exit(-1);
	}
	//return
	return count;
}


//--------- PDB Add Assessment in B-factor column ---------------//
void PDB_Add_Assess(string &pdbfile,FILE *fp,
	vector <double> &assess, map<string, int > &ws_mapping) //->from .pdb file
{
	ifstream fin;
	string buf,temp;
	//read
	fin.open(pdbfile.c_str(), ios::in);
	if(fin.fail()!=0)
	{
		fprintf(stderr,"pdbfile %s not found!!\n",pdbfile.c_str());
		exit(-1);
	}
	//proc
	map<string, int >::iterator iter;
	int pos;
	int len;
	for(;;)
	{
		if(!getline(fin,buf,'\n'))break;
		len=(int)buf.length();
		if(len<3)
		{
			fprintf(fp,"%s\n",buf.c_str());
			continue;
		}
		//check TER
		temp=buf.substr(0,3);
		if(temp=="TER"||temp=="END")
		{
			fprintf(fp,"%s\n",buf.c_str());
			break;
		}
		//check ATOM
		if(len<4)
		{
			fprintf(fp,"%s\n",buf.c_str());
			continue;
		}
		temp=buf.substr(0,4);
		if(temp!="ATOM" && temp!="HETA")
		{
			fprintf(fp,"%s\n",buf.c_str());
			continue;
		}
		//residue number
		temp=buf.substr(22,4);
		int key=ws_mapping[temp]-1;
		//output
		string part1=buf.substr(0,60);
		string part2=buf.substr(66,len-66);
		fprintf(fp,"%s%6.2f%s\n",part1.c_str(),assess[key],part2.c_str());
	}
}

//---------- main ----------//
int main(int argc,char **argv)
{
	//---- PDB_Add_Assess ----//
	{
		if(argc<3)
		{
			fprintf(stderr,"Version 1.00 \n");
			fprintf(stderr,"PDB_Add_Assess <pdbfile> <assess_file> <outfile> \n");
			fprintf(stderr,"[note]: input PDB_file and assess_file, \n");
			fprintf(stderr,"        transfer original B-factor in PDB into assessment. \n");
			exit(-1);
		}
		string infile=argv[1];
		string assess_file=argv[2];
		string outfile=argv[3];
		//load assess_file
		vector <double> assess;
		int l1=Load_Assess_File(assess_file,assess);
		//load PDB file
		map<string, int > ws_mapping;
		int l2=Read_PDB_CA_Only(infile,ws_mapping);
		//check length
		if(l1!=l2)
		{
			fprintf(stderr,"assess_file length %d not equal to pdb_ca length %d \n",l1,l2);
			exit(-1);
		}
		//do transfer
		FILE *fp=fopen(outfile.c_str(),"wb");
		PDB_Add_Assess(infile,fp,assess,ws_mapping);
		fclose(fp);
		exit(0);
	}
}
